package com.rockwell.scl.phase.opcrealtimetagtrend0010;

import com.datasweep.compatibility.client.ActivitySetStep;
import com.datasweep.compatibility.client.Response;
import com.jgoodies.forms.factories.CC;
import com.jgoodies.forms.layout.FormLayout;
import com.rockwell.mes.apps.ebr.ifc.phase.IPhaseCompleter;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.UIConstants;
import com.rockwell.mes.apps.ebr.ifc.swing.AbstractPhaseExecutorSwing;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseColumnLayout;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseColumnLayout.Column;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseColumnLayout.Layout;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSwingHelper;
import com.rockwell.mes.commons.deviation.ifc.IESignatureExecutor;
import com.rockwell.mes.commons.deviation.ifc.exceptionrecording.IMESExceptionRecord;
import com.rockwell.mes.commons.parameter.instruction.MESParamInstruction0300;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;
import com.rockwell.mes.services.s88.ifc.recipe.IMESPhase;
import com.rockwell.scl.phase.opcrealtimetagtrend0010.opchelper.OPCTagMonitor;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * TODO: Please enter the description of this type. This is mandatory!
 * <p>
 * This runtime phase executor skeleton is generated by the PhaseLibManager.
 * <p>
 *
 * TODO: @author UserName, (c) Copyright 2010 Rockwell Automation Technologies, Inc.
 *         All Rights Reserved.
 */
public class RtPhaseExecutorOpcRTTagTrend0010 extends AbstractPhaseExecutorSwing {
    private JPanel controlPanel,createPanel,labelPanel,dataPanel;
    private JButton displayBtn;
    private JLabel instructionLabel;
    private String instructionString;//定义标题

    /**
     * ctor for an ACTIVE phase or a COMPLETED phase in case of resume.
     * 
     * @param inPhaseCompleter the object, which shall be used to complete the phase
     * @param inRtPhase the runtime phase to be executed
     */

    public RtPhaseExecutorOpcRTTagTrend0010(IPhaseCompleter inPhaseCompleter, IMESRtPhase inRtPhase) {
        super(inPhaseCompleter, inRtPhase);
    }
    /*
   初始化主panel方法
  */
    private void initPanel() {
        createPanel = PhaseSwingHelper.createPanel();
        createPanel.setEnabled(true);
        createPanel.setOpaque(false);
        createPanel.setLayout(new BorderLayout());
        createPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
        setLabelPanel();
        setDataPanel();
        setControlPanel();
        createPanel.add(labelPanel, BorderLayout.NORTH);// card panel会放在改panel的中间位置
        createPanel.add(dataPanel,BorderLayout.CENTER);//
        createPanel.add(controlPanel,BorderLayout.SOUTH);// 用于控制不同打印panel的button会放在g该panel的最下面
    }
    /**
     *
     * 初始化Label Panel
     */
    private void setLabelPanel() {
        labelPanel=PhaseSwingHelper.createPanel();
        instructionLabel = PhaseSwingHelper.createJLabel(instructionString);
        String columnSpace = String.format("%dpx", UIConstants.DEFAULT_BUTTON_WIDTH+350);
        String rowSpace = String.format("%dpx", UIConstants.DEFAULT_BUTTON_HEIGHT);
        FormLayout layout = new FormLayout(columnSpace, rowSpace);
        labelPanel.setLayout(layout);
        labelPanel.setEnabled(true);
        labelPanel.setOpaque(false);
        labelPanel.add(instructionLabel, CC.xywh(1, 1, 1, 1, CC.FILL, CC.CENTER));

    }
    /**
     *
     * 初始化data panel
     */
    private void setDataPanel(){
        dataPanel = PhaseSwingHelper.createPanel();
        dataPanel.setEnabled(true);
        dataPanel.setOpaque(false);

    }
    public void setControlPanel(){
        controlPanel= PhaseSwingHelper.createPanel();
        controlPanel.setEnabled(true);
        controlPanel.setOpaque(false);
        String columnSpace = String.format("%dpx,%dpx,%dpx,%dpx,%dpx", UIConstants.DEFAULT_BUTTON_WIDTH-50, UIConstants.DEFAULT_BUTTON_WIDTH - 165,
                UIConstants.DEFAULT_BUTTON_WIDTH+300, UIConstants.DEFAULT_BUTTON_WIDTH - 150, UIConstants.DEFAULT_BUTTON_WIDTH);
        String rowSpace = String.format("%dpx", UIConstants.DEFAULT_BUTTON_HEIGHT);
        FormLayout layout = new FormLayout(columnSpace, rowSpace);
        controlPanel.setLayout(layout);
        displayBtn = PhaseSwingHelper.createPhaseButton("Display", getStatus());
        controlPanel.add(displayBtn,CC.xywh(5, 1, 1, 1, CC.FILL, CC.CENTER));
    }
    /**
     * ctor for a phase for the PREVIEW.
     * 
     * @param inPhase the related phase
     * @param inStep  the related activity set step
     */
    public RtPhaseExecutorOpcRTTagTrend0010(IMESPhase inPhase, ActivitySetStep inStep) {
        super(inPhase, inStep);
    }
    
    /**
     * REMARK: This method is called when the phase is rendered by the
     * framework.
     * <p>
     * {@inheritDoc}
     * 
     * @see AbstractPhaseExecutorSwing#createPhaseComponent()
     */
    @Override
    public JComponent createPhaseComponent() {
        JPanel layoutPanel = PhaseSwingHelper.createPanel(Layout.LAYOUT_SINGLE_COLUMN, getStatus());
        JButton confirmButton = ((PhaseColumnLayout) layoutPanel.getLayout()).getConfirmButton();
        instructionString = getProcessParameterData(MESParamInstruction0300.class, "Instruction").getColumn1();
//        // TODO: Implement the phase UI
//        JLabel label = new JLabel("Hello World. Consider I18N.");
//        label.setVerticalAlignment(SwingConstants.TOP); // label shall be directly on top after insets
        initPanel();
        layoutPanel.add(createPanel, Column.FIRST_COLUMN);
        JFrame frame = new JFrame();
        frame.add(layoutPanel, BorderLayout.CENTER);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        if (getStatus() == Status.ACTIVE) {
            /** confirm button listener */
            class ConfirmButtonListener implements ActionListener {
                @Override
                public void actionPerformed(ActionEvent event) {
                    getPhaseCompleter().completePhase();
                }
            }
            confirmButton.addActionListener(new ConfirmButtonListener());
            addComponentForCompletion(confirmButton);
        }
        //生成批号事件
        if (getStatus() == Status.ACTIVE) {
            class DisplayButtonListener implements ActionListener {
                @Override
                public void actionPerformed(ActionEvent event) {
                   new OPCTagMonitor("HOM 01","Temperature",layoutPanel,dataPanel);
                }
            }
           displayBtn.addActionListener(new DisplayButtonListener());
        }
        return layoutPanel;
    }


    /**
     * {@inheritDoc}
     * 
     * @see com.rockwell.mes.apps.ebr.ifc.phase.IPhaseExecutor#
     *      performCompletionCheck()
     */
    @Override
    public boolean performCompletionCheck() {
        // TODO: Implement if you want to perform checks before complete is performed.
        return true;
    }
    
    /**
     * REMARK: This method is called when the complete() method has been called
     * by this class. Normally this is when the user has pressed the complete
     * button. In this case the performCompletionCheck() is called. If the check
     * returns true this method is called.
     * <p>
     * {@inheritDoc}
     * 
     * @see com.rockwell.mes.apps.ebr.ifc.phase.IPhaseExecutor#performComplete()
     */
    @Override
    public Response performComplete() {
        // TODO: Implement the behavior when the phase is completed (e.g. creation of output etc.)
        
        return new Response();
    }

    /**
     * {@inheritDoc}
     * 
     * @see AbstractPhaseExecutorSwing
     *      #createPhaseExceptionComponent()
     */
    @Override
    public JComponent createPhaseExceptionComponent() {
        JPanel exceptionPanel = PhaseSwingHelper.createExceptionPanel(Layout.LAYOUT_SINGLE_COLUMN);
        JButton confirmButton = ((PhaseColumnLayout) exceptionPanel.getLayout()).getConfirmButton();

        // TODO: Implement the exception UI
        JLabel label = new JLabel("Exception Hello World. Consider I18N.");
        label.setVerticalAlignment(SwingConstants.TOP); // label shall be directly on top after insets
        exceptionPanel.add(label, Column.FIRST_COLUMN);

        /** confirm exception listener */
        class ConfirmExceptionListener implements ActionListener {
            @Override
            public void actionPerformed(ActionEvent event) {
                // TODO: Implement the exception behavior
                displayException("MyUniqueCheckKey", IMESExceptionRecord.RiskClass.low, 
                                 "The text of my exception. Consider I18N.");
            }
        }
        confirmButton.addActionListener(new ConfirmExceptionListener());

        return exceptionPanel;
    }

    /**
     * {@inheritDoc}
     * 
     * @see com.rockwell.mes.apps.ebr.ifc.phase.AbstractPhaseExecutor#exceptionSigned(String)
     */
    @Override
    public void exceptionSigned(String checkKey) {
        // TODO: Implement if you want to update the UI after an exception was signed.
    }

    /**
     * {@inheritDoc}
     * 
     * @see com.rockwell.mes.apps.ebr.ifc.phase.AbstractPhaseExecutor#exceptionCanceled(String)
     */
    @Override
    public void exceptionCanceled(String checkKey) {
        // TODO: Implement if you want to update the UI after an exception was canceled.
    }

    /**
     * {@inheritDoc}
     * 
     * @see com.rockwell.mes.apps.ebr.ifc.phase.AbstractPhaseExecutor#exceptionCallbackInSaveTransaction(String,
     *      IMESExceptionRecord,
     *      IESignatureExecutor)
     */
    @Override
    public void exceptionCallbackInSaveTransaction(String checkKey, IMESExceptionRecord exceptionRecord,
            IESignatureExecutor sigExecutor) {
        // TODO: Implement if you want invoke business functionality when the exception is saved.
    }
    
    /**
     * Creates an (additional) runtime phase data object suitable for this type
     * of phase and links it to the runtime phase.
     * 
     * @return created phase data instance
     */
    protected final MESRtPhaseDataOpcRTTagTrend0010 addRtPhaseData() {
        return (MESRtPhaseDataOpcRTTagTrend0010) getRtPhase().addRtPhaseData();
    }

    /**
     * Gets the current (last) runtime phase data of the runtime phase.
     * 
     * @return phase data instance
     */
    protected final MESRtPhaseDataOpcRTTagTrend0010 getRtPhaseData() {
        return (MESRtPhaseDataOpcRTTagTrend0010) getRtPhase().getRtPhaseData();
    }

    /**
     * Gets all runtime phase data of the runtime phase.
     * 
     * @return unmodifiable list of all phase data instance
     */
    protected final List<MESRtPhaseDataOpcRTTagTrend0010> getAllRtPhaseData() {
        return (List) getRtPhase().getAllRtPhaseData();
    }
    
}
