package com.rockwell.mes.phase.eqaigetopcvalues;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.SerializationUtils;

/**
 * This file is generated by the PhaseGenerator
 */
import com.datasweep.compatibility.client.ATRow;
import com.datasweep.compatibility.client.Response;
import com.rockwell.mes.phase.eqaigetopcvalues.datahandler.DataHandlerFactory0100;
import com.rockwell.mes.services.s88.ifc.library.IBuildingBlockOutputDescriptor;
import com.rockwell.mes.services.s88.ifc.processdata.IDynamicRtPhaseOutput;
import com.rockwell.mes.services.s88.ifc.recipe.IMESPhase;
import com.rockwell.mes.services.s88.ifc.recipe.IS88ProcessParameterBundle;

/**
 * Generated class definition
 */
public class MESRtPhaseOutputEqAIGetOPCVals0100 extends MESGeneratedRtPhaseOutputEqAIGetOPCVals0100 implements IDynamicRtPhaseOutput {

    private Map<String, Object> outputMap;

    /**
     * Generated constructor (from DB key)
     *
     * @param key The key of the ATRow to load.
     */
    public MESRtPhaseOutputEqAIGetOPCVals0100(final long key) {
        super(key);
    }

    /**
     * Generated copy constructor
     *
     * @param source The source to copy.
     */
    public MESRtPhaseOutputEqAIGetOPCVals0100(final MESRtPhaseOutputEqAIGetOPCVals0100 source) {
        super(source);
    }

    /**
     * Generated constructor (from ATRow)
     *
     * @param baseATRow The ATRow to wrap.
     */
    public MESRtPhaseOutputEqAIGetOPCVals0100(final ATRow baseATRow) {
        super(baseATRow);
    }

    /**
     * Generated default constructor
     */
    public MESRtPhaseOutputEqAIGetOPCVals0100() {
        super();
    }

    @Override
    public void setOutputValue(final String outputName, final Object value) {
        if (outputMap == null) {
            outputMap = new HashMap<String, Object>();
        }
        outputMap.put(outputName, value);
    }

    @Override
    public Object getOutputValue(final String outputName) {
        // first check if the standard output is requested
        if ("allGetSuccessful".equals(outputName)) {
            return getAllGetSuccessful();
        }
        if (outputMap == null) {
            final byte[] serializedMap = getOutputValuesSerializ();
            if (serializedMap != null) {
                outputMap = (Map<String, Object>) SerializationUtils.deserialize(serializedMap);
            }
        }
        final Object value = outputMap != null ? outputMap.get(outputName) : null;
        return value;
    }

    @Override
    public List<IBuildingBlockOutputDescriptor> getDynamicOutputDescriptors(final IMESPhase phase) {
        final List<IBuildingBlockOutputDescriptor> result = new ArrayList<>();
        final List<IS88ProcessParameterBundle> parameterBundles = phase.getDynamicProcessParameterBundlesList();

        int bundleNumber = 0;
        for (final IS88ProcessParameterBundle bundle : parameterBundles) {
            final List<IBuildingBlockOutputDescriptor> descriptors = createOutputDescriptorFromProcessParameterBundle(bundle, bundleNumber++);
            result.addAll(descriptors);
        }

        for (final IBuildingBlockOutputDescriptor descriptor : super.getOutputDescriptors()) {
            if (!"outputValuesSerializ".equals(descriptor.getName()) && !result.contains(descriptor)) {
                result.add(descriptor);
            }
        }
        return result;
    }

    @Override
    public List<IBuildingBlockOutputDescriptor> getOutputDescriptors() {
        // we need all dynamic and standard descriptors in all cases (RD, PEC, Transition etc.)
        return getDynamicOutputDescriptors(getParent().getPhase());
    }

    @Override
    protected Response prepareATRowForSave() {
        if (outputMap != null) {
            final byte[] serializedMap = SerializationUtils.serialize((HashMap<String, Object>) outputMap);
            setOutputValuesSerializ(serializedMap);
        }
        return super.prepareATRowForSave();
    }

    private List<IBuildingBlockOutputDescriptor> createOutputDescriptorFromProcessParameterBundle(final IS88ProcessParameterBundle bundle,
            final int bundleNumber) {
        final String displayName = bundle.getUserDefinedIdentifier();
        final short dataType = ParameterBundleType0100.fromIdentifier(bundle.getInternalIdentifier()).getIDataType();
        return DataHandlerFactory0100.getHandler(dataType).createOutputDescriptors(bundleNumber, displayName);
    }

}
