package com.rockwell.mes.phase.eqaigetopcvalues;

/**
 * This file is generated by the PhaseLibManager
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;

import java.math.BigDecimal;
import com.datasweep.compatibility.client.MeasuredValue;
import com.rockwell.mes.commons.base.ifc.functional.MeasuredValueUtilities;
import com.datasweep.compatibility.ui.Time;


/**
 * Generated class definition
 */
public abstract class MESGeneratedRtPhaseDataEqAIGetOPCVals0100Filter extends MESATObjectFilter  {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    private static final String ATDEFINITION_NAME = "RS_PhDatEqAIGetOPCVals0100";

    /**
     * Generated method definition
     *
     * @param server The Server object
     */
    public MESGeneratedRtPhaseDataEqAIGetOPCVals0100Filter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated method definition
     *
     */
    public MESGeneratedRtPhaseDataEqAIGetOPCVals0100Filter() {
        super(PCContext.getServerImpl(), ATDEFINITION_NAME);
    }

    /**
     * Generated method definition
     *
     * @return the list of the objects
     */
    @Override
    public List<MESRtPhaseDataEqAIGetOPCVals0100> getFilteredObjects () {
        return MESATObject.getFilteredMESATObjectList(this, MESRtPhaseDataEqAIGetOPCVals0100.class);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forParentEqualTo(IMESRtPhase value) //
            throws DatasweepException {
        String columnName = MESRtPhaseDataEqAIGetOPCVals0100.COL_NAME_PARENT;
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo(columnName, Long.valueOf(value.getKey()));
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forParentNotEqualTo(IMESRtPhase value) //
            throws DatasweepException {
        String columnName = MESRtPhaseDataEqAIGetOPCVals0100.COL_NAME_PARENT;
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo(columnName, Long.valueOf(value.getKey()));
    }



    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqIdentifierEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_eqIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqIdentifierNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_eqIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqIdentifierContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_eqIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqIdentifierStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_eqIdentifier", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqShortDescriptionEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_eqShortDescription", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqShortDescriptionNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_eqShortDescription", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqShortDescriptionContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_eqShortDescription", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forEqShortDescriptionStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_eqShortDescription", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_property", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_property", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_property", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_property", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forBundleNameEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_bundleName", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forBundleNameNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_bundleName", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forBundleNameContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_bundleName", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forBundleNameStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_bundleName", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forNumericValueEqualTo(BigDecimal value) //
            throws DatasweepException {
        MeasuredValue mv = value == null ? null : MeasuredValueUtilities.createMV(value, "");
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_numericValue", mv);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forNumericValueNotEqualTo(BigDecimal value) //
            throws DatasweepException {
        MeasuredValue mv = value == null ? null : MeasuredValueUtilities.createMV(value, "");
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_numericValue", mv);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forBooleanValueEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_booleanValue", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forBooleanValueNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_booleanValue", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forStringValueEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_stringValue", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forStringValueNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_stringValue", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forStringValueContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_stringValue", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forStringValueStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_stringValue", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forUomEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_uom", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forUomNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_uom", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forUomContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_uom", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forUomStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_uom", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyDataTypeEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_propertyDataType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyDataTypeNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_propertyDataType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyDataTypeContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameContaining("RS_propertyDataType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forPropertyDataTypeStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameStartingWith("RS_propertyDataType", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forTimestampValueEqualTo(Time value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_timestampValue", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forTimestampValueNotEqualTo(Time value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_timestampValue", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forIsValueOverriddenEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_isValueOverridden", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forIsValueOverriddenNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_isValueOverridden", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forIsLimitViolateSignedEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_isLimitViolateSigned", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forIsLimitViolateSignedNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_isLimitViolateSigned", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forHasValueBeenReadEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameEqualTo("RS_hasValueBeenRead", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataEqAIGetOPCVals0100Filter forHasValueBeenReadNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataEqAIGetOPCVals0100Filter) forColumnNameNotEqualTo("RS_hasValueBeenRead", value);
    }

}
